datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ---------------------------------------------------------------------------------------------
// NextAuth.js models
// ---------------------------------------------------------------------------------------------

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String            @id @default(cuid())
  name          String?
  displayName   String?
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  role          String?           @default("user")
  createdAt     DateTime          @default(now())
  accounts      Account[]
  sessions      Session[]
  Build         Build[]
  BuildVotes    BuildVoteCounts[]
  BuildReports  BuildReports[]
  BannedUsers   BannedUsers[]
  PaidUsers     PaidUsers[]
  UserItems     UserItems[]
  UserProfile   UserProfile?
  UserLoadouts  UserLoadouts[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ---------------------------------------------------------------------------------------------
// Other models
// ---------------------------------------------------------------------------------------------

enum ITEM_CATEGORY {
  helm
  torso
  legs
  gloves
  relic
  amulet
  weapon
  archtype
  concoction
  consumable
  mod
  mutator
  relicfragment
  ring
  skill
  trait
}

enum ITEM_DLC {
  base
  dlc1
  dlc2
}

model Item {
  id         String       @id @default(cuid())
  itemId     String       @unique
  dlc        ITEM_DLC     @default(base)
  isActive   Boolean      @default(true)
  BuildItems BuildItems[]
  UserItems  UserItems[]
}

model UserItems {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId String

  @@index([userId])
  @@index([itemId])
}

model UserLoadouts {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  build     Build     @relation(fields: [buildId], references: [id], onDelete: Cascade)
  buildId   String
  slot      Int

  @@index([userId])
  @@index([buildId])
}

model Build {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
  createdBy       User              @relation(fields: [createdById], references: [id])
  createdById     String
  isPublic        Boolean           @default(true)
  isFeaturedBuild Boolean           @default(false)
  isPatchAffected Boolean           @default(false)
  name            String
  description     String?           @db.Text
  videoUrl        String?
  thumbnailUrl    String?
  buildLink       String?
  helm            String? // Unused, legacy field
  torso           String? // Unused, legacy field
  legs            String? // Unused, legacy field
  gloves          String? // Unused, legacy field
  relic           String? // Unused, legacy field
  amulet          String? // Unused, legacy field
  weapon          String? // Unused, legacy field
  ring            String? // Unused, legacy field
  archtype        String? // Unused, legacy field
  skill           String? // Unused, legacy field
  concoction      String? // Unused, legacy field
  consumable      String? // Unused, legacy field
  mod             String? // Unused, legacy field
  mutator         String? // Unused, legacy field
  relicfragment   String? // Unused, legacy field
  trait           String? // Unused, legacy field
  BuildVotes      BuildVoteCounts[]
  BuildReports    BuildReports[]
  BuildItems      BuildItems[]
  UserProfile     UserProfile?      @relation(fields: [userProfileId], references: [id])
  userProfileId   String?
  UserLoadouts    UserLoadouts[]

  @@index([createdById])
  @@index([userProfileId])
}

model BuildItems {
  id       String  @id @default(cuid())
  build    Build   @relation(fields: [buildId], references: [id], onDelete: Cascade)
  buildId  String
  item     Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId   String
  category String?
  index    Int?
  amount   Int?

  @@index([buildId])
  @@index([itemId])
}

model BuildVoteCounts {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  build     Build     @relation(fields: [buildId], references: [id], onDelete: Cascade)
  buildId   String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([buildId])
  @@index([userId])
}

model BuildReports {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  build     Build    @relation(fields: [buildId], references: [id], onDelete: Cascade)
  buildId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  reason    String

  @@index([buildId])
  @@index([userId])
}

model UserProfile {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @unique // Added @unique directive
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio          String   @db.Text
  pinnedBuilds Build[]
}

model BannedUsers {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  reason    String

  @@index([userId])
}

model PaidUsers {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
}
